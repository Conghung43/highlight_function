
1. Execute time:
Stopwatch stopwatch = new Stopwatch(); stopwatch.Start();
stopwatch.Stop(); long elMs = stopwatch.ElapsedMilliseconds; UnityEngine.Debug.Log("NormalizeImage time:" + elMs + "ms");//stopwatch.Reset(); stopwatch.Start();

2.write file:

byte[] jpgData = result.EncodeToJPG();
//for Windows/ unity editor
File.WriteAllBytes("test.jpg", jpgData);
//for android/ios
AssetDatabase.Refresh();
string filePath = Path.Combine(Application.persistentDataPath,  "test.jpg");//
System.IO.File.WriteAllBytes(filePath, jpgData);

Install package
Newtonsoft:   
com.unity.nuget.newtonsoft-json
Git: https://github.com/jilleJr/Newtonsoft.Json-for-Unity.git#upm

Camera setup: 
Get high resolution camera
m_CameraManager.subsystem.currentConfiguration = m_CameraManager.GetConfigurations(Allocator.Temp)[1];

//#if UNITY_EDITOR
//            filePath = "rgbaMat.jpg";
//#else
//            filePath = Path.Combine(Application.persistentDataPath, "rgbaMat.jpg");//
//#endif


// Example method to save a Mat as a JPG file
    public void SaveMatAsJPG(Mat mat, string filePath)
    {
        if (mat.empty())
        {
            Debug.LogError("The Mat is empty and cannot be saved.");
            return;
        }

        // Encode the Mat to a byte array in JPG format
        byte[] jpgBytes = Imgcodecs.imencode(".jpg", mat);

        // Save the byte array to a file
        File.WriteAllBytes(filePath, jpgBytes);

        Debug.Log("JPG file saved to: " + filePath);
    }
// Draw rectangle file 
            //for (int index = 0; index < newRect.Count; index++)
            //{
            //    Imgproc.rectangle(
            //        mat,
            //        newRect[index].tl(), // Top-left point
            //        newRect[index].br(), // Bottom-right point
            //        new Scalar(0, 255, 0, 255), // Green color in RGBA
            //        2);
            //}


            //string filePath = Path.Combine(Application.persistentDataPath, "mat.jpg");//
            //Imgcodecs.imwrite(filePath, mat);
